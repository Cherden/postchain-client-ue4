namespace IAsset {
  val interface = "com.chromiaunity.IAsset";
  
  function dependencies() = [
    chromia.INonFungibleOriginal.get(),
    chromia.ITradable.get()
  ];
  
  val owner_name = Attribute.I(interface, name = "owner_name");
  
  function register(ft3.acc.account) {
    InterfaceFactory.new(interface,
      [
        owner_name: Type(Text.T())
      ],
      dependencies(),
      [
        Marketplace.Meta.Category("Assets")
      ],
      account = account
    );
  }
  
  function get() = Interface.get(interface);
  
  function get_original_name(instance): text = AttributeHelper.get_required_text_attribute(instance, chromia.IOriginal.name, "name");
  function get_owner_name(instance): text = AttributeHelper.get_required_text_attribute(instance, owner_name, "owner_name");
  
  function assert_owner_of_id(ft3.acc.account, id: byte_array) {
    require(
      Ft3Helper.owns_original(account.id, id),
      error.new(error.type.Unauthorized, error.issue.OriginalsNonOwner)
    );
  }
  
  function assert_owner_of(ft3.acc.account, instance) {
    require(
      Ft3Helper.owns_original(account.id, Id.get_id(instance)),
      error.new(error.type.Unauthorized, error.issue.OriginalsNonOwner)
    );
  }
  
  function fetch_all_by_account(ft3.acc.account): list<instance> {
    return Ownership.find_all_originals_with_interface(account.id, get(), 1000, 0);
  }
  
  function fetch_all_by_owner_name(name): list<instance> {
    val r = Attribute.find_instances(IAsset.owner_name, name.to_gtv(), Filter.p_from(), 100);
    return r.results;
  }
  
  function get_by_id(id: byte_array): instance = Id.get_instance(id);
}