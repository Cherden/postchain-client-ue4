// A modified simplex noise algorithm since we don't have the needed bitwise operations.
// Based on https://github.com/jwagner/simplex-noise.js/blob/main/simplex-noise.ts
function simplex_2d(
  perm_mod12: list<integer>, 
  perm: list<integer>,
  grad3: list<integer>,
  x: decimal, 
  y: decimal
) {
  var n0 = 0.0;
  var n1 = 0.0;
  var n2 = 0.0;
 
  val s = (x + y) * F2;
  val i = (x + s).floor().to_integer();
  val j = (y + s).floor().to_integer();
  val t = (i + j) * G2;

  val X0 = i - t;
  val Y0 = j - t;
  val x0 = x - X0;
  val y0 = y - Y0;
  
  val i1 = if (x0 > y0) 1 else 0;
  val j1 = 1 - i1;

  val x1 = x0 - i1 + G2;
  val y1 = y0 - j1 + G2;
  val x2 = x0 - 1.0 + 2.0 * G2;
  val y2 = y0 - 1.0 + 2.0 * G2;
  
  var ii = i % 256;
  var jj = j % 256;
  if (ii < 0) ii += 256;
  if (jj < 0) jj += 256;


  var t0 = 0.5 - x0 * x0 - y0 * y0;
  if (t0 >= 0) {
    val gi0 = perm_mod12.get(ii+perm.get(jj));
    t0 *= t0;
    n0 = t0 * t0 * (grad3.get(gi0) * x0 + grad3.get(gi0 + 1) * y0);
  }

  var t1 = 0.5 - x1 * x1 - y1 * y1;
  if (t1 >= 0) {
    val gi1 = perm_mod12.get(ii+i1+perm.get(jj+j1));
    t1 *= t1;
    n1 = t1 * t1 * (grad3.get(gi1) * x1 + grad3.get(gi1 + 1) * y1);
  }

  var t2 = 0.5 - x2 * x2 - y2 * y2;
  if (t2 >= 0) {
    val gi2 = perm_mod12.get(ii+1+perm.get(jj+1));
    t2 *= t2;
    n2 = t2 * t2 * (grad3.get(gi2) * x2 + grad3.get(gi2 + 1) * y2);
  }

  return 70.0 * (n0 + n1 + n2);
}