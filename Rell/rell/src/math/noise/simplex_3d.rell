// A modified simplex noise algorithm since we don't have the needed bitwise operations.
// Based on https://github.com/jwagner/simplex-noise.js/blob/main/simplex-noise.ts
function simplex_3d(
  perm_mod12: list<integer>, 
  perm: list<integer>,
  grad3: list<integer>,
  x: decimal,
  y: decimal,
  z: decimal
) {
  var n0 = 0.0;
  var n1 = 0.0;
  var n2 = 0.0;
  var n3 = 0.0;
  
  val s = (x + y + z) * F3;
  val i = (x + s).floor().to_integer();
  val j = (y + s).floor().to_integer();
  val k = (z + s).floor().to_integer();
  val t = (i + j + k) * G3;
  
  val X0 = i - t;
  val Y0 = j - t;
  val Z0 = k - t;
  val x0 = x - X0;
  val y0 = y - Y0;
  val z0 = z - Z0;
  
  var i1 = 0; 
  var j1 = 0;
  var k1 = 0;
  
  var i2 = 0;
  var j2 = 0;
  var k2 = 0;
  
  if (x0 >= y0) {
    if (y0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i2 = 1;
      j2 = 1;
      k2 = 0;
    } else if (x0 >= z0) {
      i1 = 1;
      j1 = 0;
      k1 = 0;
      i2 = 1;
      j2 = 0;
      k2 = 1;
    } else {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i2 = 1;
      j2 = 0;
      k2 = 1;
    } 
  } else {
    if (y0 < z0) {
      i1 = 0;
      j1 = 0;
      k1 = 1;
      i2 = 0;
      j2 = 1;
      k2 = 1;
    } else if (x0 < z0) {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i2 = 0;
      j2 = 1;
      k2 = 1;
    } else {
      i1 = 0;
      j1 = 1;
      k1 = 0;
      i2 = 1;
      j2 = 1;
      k2 = 0;
    }
  }
  
  val x1 = x0 - i1 + G3;
  val y1 = y0 - j1 + G3;
  val z1 = z0 - k1 + G3;
  val x2 = x0 - i2 + 2.0 * G3;
  val y2 = y0 - j2 + 2.0 * G3;
  val z2 = z0 - k2 + 2.0 * G3;
  val x3 = x0 - 1.0 + 3.0 * G3;
  val y3 = y0 - 1.0 + 3.0 * G3;
  val z3 = z0 - 1.0 + 3.0 * G3;
  
  var ii = i % 256;
  var jj = j % 256;
  var kk = k % 256;
  if(ii < 0) ii += 256;
  if(jj < 0) jj += 256;
  if(kk < 0) kk += 256;
  
  var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
  if(t0 < 0) {
    n0 = 0.0;
  } else {
    val gi0 = perm_mod12[ii + perm[jj + perm[kk]]] * 3;
    t0 *= t0;
    n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);
  }
  
  var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
  if(t1 < 0) {
    n1 = 0.0;
  } else {
    val gi1 = perm_mod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;
    t1 *= t1;
    n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);
  }
  
  var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
  if(t2 < 0) {
    n2 = 0.0;
  } else {
    val gi2 = perm_mod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;
    t2 *= t2;
    n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);
  }
  
  var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
  if(t3 < 0) {
    n3 = 0.0;
  } else {
    val gi3 = perm_mod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;
    t3 *= t3;
    n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);
  }
  
  return 32.0 * (n0 + n1 + n2 + n3);
}