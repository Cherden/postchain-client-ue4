
namespace Mapper {
	enum option {
		remove_interface 
		// TODO: add an option which handles case where removing interface leads 
		// to attribute name conflicts in resulting map 
	}
	
	/*
	 * Used to represent keys in resulting map. When `remove_interface` options is used, then 
	 * prefix is ignored and only name is used as a map key. Otherwise resulting key has following
	 * format: `<prefix>.<name>`. 
	 */
	struct key_name {
		prefix: text? = null;
		name;
	}
	
	// TODO: Improve logic for removing interface name from attribute name. Ideally all processing should be 
	// handled in a single place after after all attributes are read from database, instead of having logic
	// spread in multiple different places like it is now, i.e. in direct, to_list and to_map mappers.
	
	/*
	 *  Maps instance entity to a map<name, gtv?> using provided mapping rules
	 */
	
	function map_instance(
		instance, 
		mappers: list<(instance, map<name, gtv?>, list<option>) -> unit>,
		options: list<option> = []
	): map<name, gtv?> {
		val instance_map = map<name, gtv?>();
	  	
	  	for (mapper in mappers) {
			mapper(instance, instance_map, options);
	  	}
	  	
		return instance_map;
	}
	
	/***************************************************************************************
	 *                                 Mapping rules
	 ***************************************************************************************/
	
	/*
	 *	Reads instance attributes provided in the list
	 */
	
	function map_attributes(
		attribute_names: list<Attribute.I>, 
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit = direct()
	): (instance, map<name, gtv?>, list<option>) -> unit {
		return _map_attributes(*, *, *, attribute_names, mapper);
	}
	
	function _map_attributes(
		instance, 
		instance_map: map<name, gtv?>, 
		options: list<option>,
		attribute_names: list<Attribute.I>, 
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit
	) {
		val attributes = attribute_names 
			@* {} ((
				key_name(prefix = $.interface, name=$.name), 
				Attribute.get_value(instance, $)
			)); 
		
		mapper(instance_map, map(attributes), options);
	}
	
	/*
	 *  Reads all instance attributes defined in provided interface list 
	 */
	
	function map_attributes_of_interfaces(
		interfaces: list<Interface.dclass>,
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit = direct()
	): (instance, map<name, gtv?>, list<option>) -> unit {
		return _map_attributes_of_interfaces(*, *, *, interfaces, mapper);
	}
	
	function _map_attributes_of_interfaces(
		instance, 
		instance_map: map<name, gtv?>, 
		options: list<option>,
		interfaces: list<Interface.dclass>,
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit
	) {
		val attributes = attribute 
			@* { .dclass in interfaces }
			@* {} ((
				key_name(prefix=$.dclass.name, name=$.name), 
				Attribute.get_value(instance, _get_attribute_name_from_attribute($))
			)); 
			
		mapper(instance_map, map(attributes), options);
	}
	
	/*
	 *  Reads all instance attributes that implement one of the interfaces provided in the list.
	 *  It is also possible to specify mapping rules for children instances.  
	 */
	
	function map_attributes_implementing_interface(
		interfaces: list<Interface.dclass>,
		children_mappers: list<(instance, map<name, gtv?>, list<option>) -> unit> = [map_all_attributes()],
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit = direct()
	): (instance, map<name, gtv?>, list<option>) -> unit {
		return _map_attributes_implementing_interface(*, *, *, children_mappers, interfaces, mapper);
	}
	
	function _map_attributes_implementing_interface(
		instance, 
		instance_map: map<name, gtv?>, 
		options: list<option>,
		children_mappers: list<(instance, map<name, gtv?>, list<option>) -> unit>,
		interfaces: list<Interface.dclass>,
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit
	) {
		val mapped_instances = (
			ia: Instance.instance_attribute, 
			id: instance_dclass
		) @* {
			ia.instance == instance,
			id.dclass in interfaces,
			id.instance == ia.value		
		} ((
			key_name(prefix=ia.attribute.dclass.name, name=ia.attribute.name), 
			map_instance(ia.value, children_mappers, options).to_gtv()
		));
		
		mapper(instance_map, map<key_name, gtv?>(mapped_instances), options);
	}
	
	/*
	 *  Reads all instance attributes  
	 */
	
	function map_all_attributes(
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit = direct()
	): (instance, map<name, gtv?>, list<option>) -> unit {
		return _map_all_attributes(*, *, *, mapper);
	}
	
	function _map_all_attributes(
		instance,
		instance_map: map<name, gtv?>,
		options: list<option>,
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit
	) {
	    var interfaces = Interface.get_all_in_instance(instance);
	     
		val attributes = attribute  
			@* { .dclass in interfaces } (attribute)
			@* {} ((
				key_name(prefix=$.dclass.name, name=$.name), 
				Attribute.get_value(instance, _get_attribute_name_from_attribute($))
			)); 
			
		mapper(instance_map, map(attributes), options);
	}
	
	/*
	 *  Manually adds attributes to instance map.
	 *  Used to add attributes which are already fetched to avoid unnecessary db access.  
	 */
	
	function add_attributes(
		attributes: map<name, gtv?>, 
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit = direct()
	): (instance, map<name, gtv?>, list<option>) -> unit {
		return _add_attributes(*, *, *, attributes, mapper);
	}
	
	function _add_attributes(
		instance,
		instance_map: map<name, gtv?>,
		options: list<option>,
		attributes: map<name, gtv?>,
		mapper: (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit
	) {
		val result = map<key_name, gtv?>();
		for ((k, v) in attributes) {
			result[key_name(prefix=null, name=k)] = v;
		}
		mapper(instance_map, result, options);
	}
	
	
	/***************************************************************************************
	 *                                 Mapping functions
	 ***************************************************************************************/
	
	/*
	 * 	Adds attributes map directly (merges) to instance map
	 */
	 
	function direct(): (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit {
		return _direct(*);
	}
	
	function _direct(
		instance_map: map<name, gtv?>, 
		attributes_map: map<key_name, gtv?>, 
		options: list<option>
	) {
		var result = map<name, gtv?>();
		if (options.contains(option.remove_interface)) {
			for ((k, v) in attributes_map) {
				result[k.name] = v;
			}
		} else {
			for ((k, v) in attributes_map) {
				result[get_key_name(k)] = v;
			}
		}
		instance_map.put_all(result);
	}
	
	/*
	 *  Assigns attributes map to `name` key in instance map
	 */
	 
	function to_map(name): (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit {
		return _map(*, *, *, name);
	}
	
	function _map(
		instance_map: map<name, gtv?>, 
		attributes_map: map<key_name, gtv?>, 
		options: list<option>,
		name
	) {
		var result = map<name, gtv?>();
		if (options.contains(option.remove_interface)) {
			for ((k, v) in attributes_map) {
				result[k.name] = v;
			}
		} else {
			for ((k, v) in attributes_map) {
				result[get_key_name(k)] = v;
			}
		}
		instance_map[name] = result.to_gtv();
	}
	
	/*
	 *  Assigns attributes map values as a list to `name` key in instance map
	 */
	 
	function to_list(name): (map<name, gtv?>, map<key_name, gtv?>, list<option>) -> unit {
		return _list(*, *, *, name);
	}
	
	function _list(
		instance_map: map<name, gtv?>, 
		attributes_map: map<key_name, gtv?>,
		options: list<option>, 
		name
	) {
		instance_map[name] = attributes_map.values().to_gtv();
	}
	
	
	/***************************************************************************************
	 *                                      Helper 
	 ***************************************************************************************/
		    
	function _get_attribute_name_from_attribute(attribute) =
	    Attribute.I(interface = attribute.dclass.name, name = attribute.name);
	    
	function remove_interfaces(instance_map: map<name, gtv?>, options: list<option>) {
		var result = map<name, gtv?>();
	  	for ((name, value) in instance_map) {
	  			
	  	}
	  	return result;
	}
	
	function get_key_name(key_name) {
		return if (key_name.prefix??) key_name.prefix + "." + key_name.name else key_name.name;
	}
}
