namespace Integer {
	entity integer_attribute {
		index instance, attribute, value;
		index attribute, value;
		mutable value: integer;
	}
	
	function T(value: integer? = null): attribute_type {
		return attribute_type(type = Attribute.type.integer, value = value?.to_gtv());
	}
	
	function create_value(instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		util.ensure_not_implemented(instance, attribute);
		Meta.Engine.execute_value(instance, attribute, value.to_gtv());
		Unsafe.add_value_by_attribute(instance, attribute, value);
	}
	
	function add_value(instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		util.ensure_attribute_can_be_added(instance, attribute);
		Meta.Engine.execute_value(instance, attribute, value.to_gtv());
		Unsafe.add_value_by_attribute(instance, attribute, value);
	}
	
	function update_value(instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		Meta.Engine.execute_value(instance, attribute, value.to_gtv());
		Unsafe.update_value_by_attribute(instance, attribute, value);
	}
	
	function set_value(instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		var attr = integer_attribute @? {instance, attribute};
		if(attr == null) {
			add_value(instance, attribute_name, value);
		} else {
			update_value(instance, attribute_name, value);
		}
	}
	
	function remove_value(instance, attribute_name: Attribute.I): integer {
		val attribute = Attribute.get(attribute_name);
		util.ensure_optional(attribute);
		return Unsafe.remove_value_by_attribute(instance, attribute);
	}	
	
	function get_value (instance, attribute_name: Attribute.I): integer? { 
		val attribute = Attribute.get(attribute_name);
		var attr = integer_attribute @? { instance, attribute };
	 	
	 	if(attr??) {
	 		return attr.value;
	 	} else {
	 		val prototypes = Prototype.get_all(instance);
	 		for (p in prototypes) {
	 			attr = integer_attribute @? { p, attribute };
	 			if(attr??) {
	 				return attr.value;
	 			}
	 		}
	 	}
	 	return null;
	}
	
	function fetch_range_from(attribute, value: integer, from: rowid, _limit: integer = 100) {
		return integer_attribute @* {
			attribute, .value == value, .instance.rowid > from
		} (.instance) limit _limit;
	}
	
	function apply_filter(instances: list<instance>, filter: Filter.I_by_attribute, from: Filter.p_from):
	 (results: list<instance>, from: Filter.p_from?) { 	
		val limit_count = 100;
		val attribute = filter.attribute;
		val value = integer.from_gtv(filter.parameter);
		
		if(instances.empty()) {
			val attribute_name = Attribute.def_I(attribute.dclass.name, attribute.name);
			return Attribute.find_instances(attribute_name, value.to_gtv(), from, limit_count);
		};
		
		var res = list<instance>();
		
		val first = instances[0];
		val last = instances[instances.size() - 1];
		
		val in_prototype = (a: integer_attribute, ip: instance_prototype) @* {
			a.attribute == attribute, a.value == value,
			ip.prototype == a.instance,
			ip.instance >= first, ip.instance <= last
		} (ip.instance) limit limit_count;
		
		res.add_all(in_prototype);
		
		val in_attribute = (a: integer_attribute) @* {
				attribute,
				a.value == value,
				a.instance >= first, a.instance <= last
		} (a.instance) limit limit_count;
		
		res.add_all(in_attribute);
		
		val prior_instances = set(instances);
		res = res @* {prior_instances.contains($)};
		
		return (results = res, from = null);
	}
}

namespace Integer.Unsafe {
	function add_value (instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		add_value_by_attribute(instance, attribute, value);
	}
	
	function add_value_by_attribute(instance, attribute, value: integer) {
		util.ensure_type(Attribute.type.integer, attribute.type);
		create integer_attribute ( instance, attribute, value );
	}
	
	function update_value (instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		update_value_by_attribute(instance, attribute, value);
	}
	
	function update_value_by_attribute (instance, attribute, value: integer) {
		util.ensure_type(Attribute.type.integer, attribute.type);
		update integer_attribute @ { instance, attribute } (.value = value);
	}
	
	function set_value(instance, attribute_name: Attribute.I, value: integer) {
		val attribute = Attribute.get(attribute_name);
		set_value_by_attribute(instance, attribute, value);
	}
	
	function set_value_by_attribute(instance, attribute, value: integer) {
		var attr = integer_attribute @? {instance, attribute};
		if(attr == null) {
			create integer_attribute ( instance, attribute, value );
		} else {
			attr.value = value;
		}
	}
	
	function remove_value (instance, attribute_name: Attribute.I): integer {	
		val attribute = Attribute.get(attribute_name);
		return remove_value_by_attribute(instance, attribute);
	}
	
	function remove_value_by_attribute (instance, attribute): integer {	
		val i = integer_attribute @ {instance, attribute};
		val value = i.value;
		
		delete i;
		
		return value;
	}
}
