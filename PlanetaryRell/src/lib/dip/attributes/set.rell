/**
 * A set attribute contains its attributes in a child instance (elements).
 * The child instance has x amounts of attributes, which are stored as normal {type}_attribute.
 * Each {type}_attribute is linked with the same attribute as the set_attribute.
 * Elements can only be of simple types (i.e. not another container).
 */
 
namespace Set {
	entity set_inner_type {
		key attribute;
		index attribute, Attribute.type;
	}
	 
	entity set_attribute {
		index instance, attribute;
	}
	
	function T(inner_type: Attribute.type, value: gtv? = null): attribute_type {
		return attribute_type(inner_type = inner_type.to_gtv(), type = Attribute.type.unordered_container, value = value?.to_gtv());
	}
	
	function create_elements(instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		util.ensure_not_implemented(instance, attribute);
		Meta.Engine.execute_value(instance, attribute, elements);
		Unsafe.add_elements_by_attribute(instance, attribute, elements);
	}
	
	function add_elements(instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		util.ensure_attribute_can_be_added(instance, attribute);
		Meta.Engine.execute_value(instance, attribute, elements);
		Unsafe.add_elements_by_attribute(instance, attribute, elements);
	}
	
	function update_elements(instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		Meta.Engine.execute_value(instance, attribute, elements);
		Unsafe.update_elements_by_attribute(instance, attribute, elements);
	}
	
	function set_elements(instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		var attr = set_attribute @? {instance, attribute};
		if(attr == null) {
			add_elements(instance, attribute_name, elements);
		} else {
			update_elements(instance, attribute_name, elements);
		}
	}
	
	function remove_elements(instance, attribute_name: Attribute.I): gtv {
		val attribute = Attribute.get(attribute_name);
		util.ensure_optional(attribute);
		return Unsafe.remove_elements_by_attribute(instance, attribute);
	}
	
	function add_element(instance, attribute_name: Attribute.I, element: gtv) {
		val attribute = Attribute.get(attribute_name);
		Meta.Engine.execute_value(instance, attribute, element);
		Unsafe.add_by_attribute(instance, attribute, element);
	}
	
	function remove_element(instance, attribute_name: Attribute.I, element: gtv) {
		val attribute = Attribute.get(attribute_name);
		Meta.Engine.execute_value(instance, attribute, element);
		Unsafe.remove_by_attribute(instance, attribute, element);
	}
	
	/**
	 * Get the set attribute from an instance and unpack it to a rell set.
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @returns (type: a_type, values: gtv) A tuple containing the set type and the set parsed as set<T>(values).to_gtv()
	 */
	function unpack(instance, attribute_name: Attribute.I): (type: Attribute.type, values: gtv)? {
		val attribute = Attribute.get(attribute_name);
		return unpack_by_attribute(instance, attribute);
	}
	
	function unpack_by_attribute(instance, attribute): (type: Attribute.type, values: gtv)? {
		val set_type = set_inner_type @ {attribute}.type;
		
		var attr = set_attribute @? { instance, attribute };
	 	
	 	if(not attr??) {
	 		val prototypes = Prototype.get_all(instance);
	 		for (p in prototypes) {
	 			attr = set_attribute @? { p, attribute };
	 			if(attr??) {
	 				break;
	 			}
	 		}
	 	}
	 	
	 	if(not attr??) return null;
		
		var ret: gtv;
		when (set_type) {
			Attribute.type.byte_array -> ret = set(ByteArray.byte_array_attribute @* {attr.instance, attribute} (.value)).to_gtv();
			Attribute.type.decimal -> ret = set(Decimal.decimal_attribute @* {attr.instance, attribute} (.value)).to_gtv();
			Attribute.type.instance -> ret = set(Instance.instance_attribute @* {.instance == attr.instance, attribute} (.value)).to_gtv();
			Attribute.type.integer -> ret = set(Integer.integer_attribute @* {attr.instance, attribute} (.value)).to_gtv();
			Attribute.type.text -> ret = set(Text.text_attribute @* {attr.instance, attribute} (.value)).to_gtv();
			else -> {require(false, "Unimplemented path"); return (type = Attribute.type.instance, values = instance.to_gtv());}
		}
		
		return (type = set_type, values = ret);
	}
	
	/**
	 * Like set.empty() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @returns integer True if no elements in set, false if any
	 */
	function is_empty(instance, attribute_name: Attribute.I): boolean {
		return size(instance, attribute_name) == 0;
	}
	
	
	function fetch_range_from(attribute, value: gtv, from: rowid) {
		val set_type = set_inner_type @ {attribute}.type;
	
		when (set_type) {
			Attribute.type.byte_array -> {
				return (s: set_attribute, v:ByteArray.byte_array_attribute) @* {
						v.attribute == attribute, v.value == byte_array.from_gtv(value), v.instance == s.instance,
						v.instance.rowid > from
					} (s.instance) limit 100;	
			}
			Attribute.type.decimal -> {
				return (s: set_attribute, v:Decimal.decimal_attribute) @* {
						v.attribute == attribute, v.value == decimal.from_gtv(value), v.instance == s.instance,
						v.instance.rowid > from
					} (s.instance) limit 100;	
			}
			Attribute.type.instance -> {
				return (s: set_attribute, v:Instance.instance_attribute) @* {
						v.attribute == attribute, v.value == instance.from_gtv(value), v.instance == s.instance,
						v.instance.rowid > from
					} (s.instance) limit 100;	
			}
			Attribute.type.integer -> {
				return (s: set_attribute, v:Integer.integer_attribute) @* {
						v.attribute == attribute, v.value == integer.from_gtv(value), v.instance == s.instance,
						v.instance.rowid > from
					} (s.instance) limit 100;	
			}
			Attribute.type.text -> {
				return (s: set_attribute, v:Text.text_attribute) @* {
						v.attribute == attribute, v.value == text.from_gtv(value), v.instance == s.instance,
						v.instance.rowid > from
					} (s.instance) limit 100;	
			}
			else -> {require(false, "Unimplemented path"); return list<instance>();}
		}
	}
	
	/**
	 * Like set.contains() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param value gtv The set.contains() parameter broken down to T(value).to_gtv()
	 * @returns boolean True if element with key exists, false if not
	 */
	function contains(root_instance: instance, attribute_name: Attribute.I, value: gtv): boolean {
		val attribute = Attribute.get(attribute_name);
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> return ByteArray.byte_array_attribute @? {attr.instance, attribute, byte_array.from_gtv(value)} != null;
			Attribute.type.decimal -> return Decimal.decimal_attribute @? {attr.instance, attribute, decimal.from_gtv(value)} != null;
			Attribute.type.instance -> return Instance.instance_attribute @? {.instance == attr.instance, attribute, .value == instance.from_gtv(value)} != null;
			Attribute.type.integer -> return Integer.integer_attribute @? {attr.instance, attribute, integer.from_gtv(value)} != null;
			Attribute.type.text -> return Text.text_attribute @? {attr.instance, attribute, text.from_gtv(value)} != null;
			else -> {require(false, "Unimplemented path"); return false;}
		}
	}
	
	/**
	 * Like set.contains_all() in rell
	 * Note: Only set.contains_all(set<T>) exists, set.contains_all(list<T>) is not implemented.
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param values gtv The set.contains_all() parameter broken down to set<T>(values).to_gtv()
	 * @returns boolean True if element with key exists, false if not
	 */
	function contains_all(root_instance: instance, attribute_name: Attribute.I, values: gtv): boolean {
		val attribute = Attribute.get(attribute_name);
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> {val vals = set<byte_array>.from_gtv(values); return ByteArray.byte_array_attribute @ {attr.instance, attribute, .value in vals} (@sum 1) == vals.size();}
			Attribute.type.decimal -> {val vals = set<decimal>.from_gtv(values); return Decimal.decimal_attribute @ {attr.instance, attribute, .value in vals} (@sum 1) == vals.size();}
			Attribute.type.instance -> {val vals = set<instance>.from_gtv(values); return Instance.instance_attribute @ {.instance == attr.instance, attribute, .value in vals} (@sum 1) == vals.size();}
			Attribute.type.integer -> {val vals = set<integer>.from_gtv(values); return Integer.integer_attribute @ {attr.instance, attribute, .value in vals} (@sum 1) == vals.size();}
			Attribute.type.text -> {val vals = set<text>.from_gtv(values); return Text.text_attribute @ {attr.instance, attribute, .value in vals} (@sum 1) == vals.size();}
			else -> {require(false, "Unimplemented path"); return false;}
		}
	}
	
	/**
	 * Like set.size() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @returns integer The amount of elements in the set
	 */
	function size(root_instance: instance, attribute_name: Attribute.I): integer {
		val attribute = Attribute.get(attribute_name);
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> return ByteArray.byte_array_attribute @ {attr.instance, attribute} (@sum 1);
			Attribute.type.decimal -> return Decimal.decimal_attribute @ {attr.instance, attribute} (@sum 1);
			Attribute.type.instance -> return Instance.instance_attribute @ {.instance == attr.instance, attribute} (@sum 1);
			Attribute.type.integer -> return Integer.integer_attribute @ {attr.instance, attribute} (@sum 1);
			Attribute.type.text -> return Text.text_attribute @ {attr.instance, attribute} (@sum 1);
			else -> {require(false, "Unimplemented path"); return 0;}
		}
	}
}

namespace Set.Unsafe {
	
	/**
	 * Set attribute constructor. Can optionally be initialized with values, otherwise empty.
	 * Note: Only set<T>(set<T>) exists, set<T>(list<T>) is not implemented.
	 * @param instance instance The instance the attribute should be mapped with
	 * @param attribute attribute The set attribute to map the instance to
	 * @param values gtv? The set<T>() parameter broken down to set<T>(values).to_gtv()
	 */
	function add_elements (instance, attribute_name: Attribute.I, values: gtv) {
		val attribute = Attribute.get(attribute_name);
		add_elements_by_attribute(instance, attribute, values);
	}
	
	function add_elements_by_attribute (instance, attribute, values: gtv) {
		util.ensure_type(Attribute.type.unordered_container, attribute.type);
		_create_set_elements(instance, attribute, values);
		create set_attribute ( instance, attribute );
	}
	
	function update_elements (instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		update_elements_by_attribute(instance, attribute, elements);
	}
	
	function update_elements_by_attribute (instance, attribute, elements: gtv) {
		clear_by_attribute(instance, attribute);
		_create_set_elements(instance, attribute, elements);
	}
	
	function set_elements(instance, attribute_name: Attribute.I, elements: gtv) {
		val attribute = Attribute.get(attribute_name);
		set_elements_by_attribute(instance, attribute, elements);
	}
	
	function set_elements_by_attribute(instance, attribute, elements: gtv) {		
		var attr = set_attribute @? {instance, attribute};
		if(attr == null) {
			add_elements_by_attribute(instance, attribute, elements );
		} else {
			update_elements_by_attribute(instance, attribute, elements );
		}
	}
	
	function remove_elements(instance, attribute_name: Attribute.I): gtv {
		val attribute = Attribute.get(attribute_name);
		return remove_elements_by_attribute(instance, attribute);
	}
	
	function remove_elements_by_attribute(instance, attribute): gtv {
		val s = unpack_by_attribute(instance, attribute);
		clear_by_attribute(instance, attribute);
		delete set_attribute @ {instance, attribute};
		
		return s!!.to_gtv();
	}
	
	
	/**
	 * Like set.add() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param value gtv The set.add() parameter broken down to T(value).to_gtv()
	 */
	function add (instance, attribute_name: Attribute.I, value: gtv): boolean {
		val attribute = Attribute.get(attribute_name);
		return add_by_attribute(instance, attribute, value);
	}
	
	function add_by_attribute(instance, attribute, value: gtv): boolean {
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {instance, attribute};
		return _create_set_element(attr.instance, attribute, set_type, value);
	}
	
	/**
	 * Like set.add_all() in rell
	 * Note: This function only implements set.add_all(set()), not set.add_all(list())
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param values gtv The set.add_all() parameter broken down to set<T>(values).to_gtv()
	 */
	function add_all (instance, attribute_name: Attribute.I, values: gtv) {
		val attribute = Attribute.get(attribute_name);
		add_all_by_attribute(instance, attribute, values);
	}
	
	function add_all_by_attribute (instance, attribute, values: gtv) {
		val attr = set_attribute @ {instance, attribute};
		_create_set_elements(attr.instance, attribute, values);
	}
	
	
	/**
	 * Like set.remove() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param value gtv The set.remove() parameter broken down to T(value).to_gtv()
	 */
	function remove(root_instance: instance, attribute_name: Attribute.I, value: gtv) {
		val attribute = Attribute.get(attribute_name);
		remove_by_attribute(root_instance, attribute, value);
	}
	
	function remove_by_attribute(root_instance: instance, attribute, value: gtv) {
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> delete ByteArray.byte_array_attribute @? {attr.instance, attribute, .value == byte_array.from_gtv(value)};
			Attribute.type.decimal -> delete Decimal.decimal_attribute @? {attr.instance, attribute, .value == decimal.from_gtv(value)};
			Attribute.type.instance -> delete Instance.instance_attribute @? {.instance == attr.instance, attribute, .value == instance.from_gtv(value)};
			Attribute.type.integer -> delete Integer.integer_attribute @? {attr.instance, attribute, .value == integer.from_gtv(value)};
			Attribute.type.text -> delete Text.text_attribute @? {attr.instance, attribute, .value == text.from_gtv(value)};
		}
	}
	
	/**
	 * Like set.remove_all() in rell
	 * Note: Only set.remove_all(set<T>) exists, set.remove_all(list<T>) is not implemented.
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 * @param values gtv The set.remove_all() parameter broken down to set<T>(values).to_gtv()
	 */
	function remove_all(root_instance: instance, attribute_name: Attribute.I, values: gtv) {
		val attribute = Attribute.get(attribute_name);
		remove_all_by_attribute(root_instance, attribute, values);
	}
	
	function remove_all_by_attribute(root_instance: instance, attribute, values: gtv) {
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> {val vals = set<byte_array>.from_gtv(values); delete ByteArray.byte_array_attribute @* {attr.instance, attribute, .value in vals};}
			Attribute.type.decimal -> {val vals = set<decimal>.from_gtv(values); delete Decimal.decimal_attribute @* {attr.instance, attribute, .value in vals};}
			Attribute.type.instance -> {val vals = set<instance>.from_gtv(values); delete Instance.instance_attribute @* {.instance == attr.instance, attribute, .value in vals};}
			Attribute.type.integer -> {val vals = set<integer>.from_gtv(values); delete Integer.integer_attribute @* {attr.instance, attribute, .value in vals};}
			Attribute.type.text -> {val vals = set<text>.from_gtv(values); delete Text.text_attribute @* {attr.instance, attribute, .value in vals};}
		}
	}
	
	/**
	 * Like set.clear() in rell
	 * @param instance instance The instance the attribute is mapped on
	 * @param attribute attribute The set attribute to search for
	 */
	function clear(root_instance: instance, attribute_name: Attribute.I) {
		val attribute = Attribute.get(attribute_name);
		clear_by_attribute(root_instance, attribute);
	}
	
	function clear_by_attribute(root_instance: instance, attribute) {
		val set_type = set_inner_type @ {attribute}.type;
		val attr = set_attribute @ {.instance == root_instance, attribute};
		when (set_type) {
			Attribute.type.byte_array -> delete ByteArray.byte_array_attribute @* {attr.instance, attribute};
			Attribute.type.decimal -> delete Decimal.decimal_attribute @* {attr.instance, attribute};
			Attribute.type.instance -> delete Instance.instance_attribute @* {.instance == attr.instance, attribute};
			Attribute.type.integer -> delete Integer.integer_attribute @* {attr.instance, attribute};
			Attribute.type.text -> delete Text.text_attribute @* {attr.instance, attribute};
		}
	}
	
	
	
	function _create_set_elements(root_element: instance, attribute, values: gtv) {
		val set_type = set_inner_type @ {attribute}.type;
		for (value in util.gtv_to_set_of_gtv(values, set_type)) {
			_create_set_element(root_element, attribute, set_type, value);
		}
	}
	
	function _create_set_element(root_element: instance, attribute, type: Attribute.type, gtv_value: gtv): boolean {
		when (type) {
			Attribute.type.byte_array -> {
				val value = byte_array.from_gtv(gtv_value);
				if (ByteArray.byte_array_attribute @? {root_element, attribute, .value == value} == null) {
					ByteArray.Unsafe.add_value_by_attribute(root_element, attribute, value);
					return true;
				}
				return false;
			}
			Attribute.type.decimal -> {
				val value = decimal.from_gtv(gtv_value);
				if (Decimal.decimal_attribute @? {root_element, attribute, .value == value} == null) {
					Decimal.Unsafe.add_value_by_attribute(root_element, attribute, value);
					return true;
				}
				return false;
			}
			Attribute.type.instance -> {
				val value = instance.from_gtv(gtv_value);
				if (Instance.instance_attribute @? {.instance == root_element, attribute, .value == value} == null) {
					Instance.Unsafe.add_value_by_attribute(root_element, attribute, value);
					return true;
			 	}
				return false;
			}
			Attribute.type.integer -> {
				val value = integer.from_gtv(gtv_value);
				if (Integer.integer_attribute @? {root_element, attribute, .value == value} == null) {
					Integer.Unsafe.add_value_by_attribute(root_element, attribute, value);
					return true;
				}
				return false;
			}
			Attribute.type.text -> {
				val value = text.from_gtv(gtv_value);
				if (Text.text_attribute @? {root_element, attribute, .value == value} == null) {
					Text.Unsafe.add_value_by_attribute(root_element, attribute, value);
					return true;
				}
				return false;
			}
			else -> {require(false, "Unimplemented path"); return false;}
		}
	}
}

